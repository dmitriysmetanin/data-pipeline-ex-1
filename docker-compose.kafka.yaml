x-services-common:
  &services-common
  build: 
    context: .
  extra_hosts:
      - "host.docker.internal:host-gateway"
  networks:
    - my-network
  env_file:
      - ${APP_PROJ_DIR:-.}/.env
    
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - my-network
  kafka:
    image: confluentinc/cp-enterprise-kafka:5.5.3
    depends_on: [zookeeper]
    hostname: kafka
    environment:
       CONNECT_PLUGIN_PATH: "/usr/share/java"
       KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://host.docker.internal:29092
       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
       KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
       KAFKA_BROKER_ID: 1
       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
       KAFKA_JMX_PORT: 9991
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-connect:
    image: debezium/connect:2.3
    depends_on:
      kafka:
        condition: service_healthy
      app-db:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_LOG_LEVEL: "DEBUG"
      CONNECT_METRICS_ENABLED: "false"
      CONNECT_PLUGIN_PATH: "/kafka/connect,/kafka/connect/debezium-connector-postgres"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_REST_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    volumes:
      - ./docker/kafka-connect/init:/docker-entrypoint-initdb.d
    entrypoint: ["/bin/bash", "-c", "/docker-entrypoint-initdb.d/init-connector.sh & /docker-entrypoint.sh"]
    networks:
      - my-network

  app-db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${APP_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${APP_DB_PASSWORD:-postgres}
      POSTGRES_DB: ${APP_DB_NAME:-bank_oltp2}
    volumes:
      - app-db-volume:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - my-network

  bank-backend:
    <<: *services-common
    build:
      context: ./bank
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./bank:/app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgres://${APP_DB_USER:-postgres}:${APP_DB_PASSWORD:-postgres}@app-db:${APP_DB_PORT:-5432}/${APP_DB_NAME:-bank_oltp2}
      - DEBUG=1
    depends_on:
      app-db:
        condition: service_healthy

  bank-frontend:
    <<: *services-common
    build:
      context: ./bank/bank-frontend
      dockerfile: Dockerfile
    volumes:
      - ./bank/bank-frontend:/app
      - /app/node_modules
    ports:
      - "8080:8080"
    environment:
      - VUE_APP_API_URL=http://localhost:8000
    depends_on:
      - bank-backend

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${APP_DB_USER}:${APP_DB_PASSWORD}@$app-db:${APP_DB_PORT}/${APP_DB_NAME}?sslmode=disable
    ports:
      - 9187:9187
    networks:
      - my-network
    volumes:
      - ./postgres-exporter/data:/tmp  # Логи и временные файлы
    restart: unless-stopped  # Автоперезапуск

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml  # Конфиг
      - ./prometheus/data:/prometheus  # Данные метрик
    networks:
      - my-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
    - 9090:9090
    restart: unless-stopped  # Автоперезапуск

  grafana:
    image: grafana/grafana
    ports:
      - 3001:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS}
    volumes:
      - ./grafana/data:/var/lib/grafana  # Дашборды, настройки, пользователи
    networks:
      - my-network
    restart: unless-stopped  # Автоперезапуск

volumes:
  app-db-volume:

networks:
  my-network:
    external: true