services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - my-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=kafka:9092
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    ports:
      - 8081:8081
    depends_on: [zookeeper, kafka]
    networks:
      - my-network

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.5.3
    depends_on: [zookeeper]
    hostname: kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9991
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 10s
      retries: 10
    command: >
      bash -c "
        /etc/confluent/docker/run &
        echo 'Waiting for Kafka to be ready...'
        sleep 30
        echo 'Creating topics...'
        kafka-topics --create --bootstrap-server localhost:9092 --topic dbserver1.public.customers --partitions 1 --replication-factor 1
        kafka-topics --create --bootstrap-server localhost:9092 --topic dbserver1.public.accounts --partitions 1 --replication-factor 1
        kafka-topics --create --bootstrap-server localhost:9092 --topic dbserver1.public.transactions --partitions 1 --replication-factor 1
        wait
      "

  kafka-connect:
    image: debezium/connect:2.3
    hostname: kafka-connect
    depends_on:
      - kafka
      - zookeeper
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: "kafka:9092"
      GROUP_ID: "kafka-connect-group"
      CONFIG_STORAGE_TOPIC: "_connect-configs"
      OFFSET_STORAGE_TOPIC: "_connect-offsets"
      STATUS_STORAGE_TOPIC: "_connect-statuses"
      CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      STATUS_STORAGE_REPLICATION_FACTOR: "1"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      REST_ADVERTISED_HOST_NAME: "kafka-connect"
      REST_PORT: "8083"
      PLUGIN_PATH: "/kafka/connect"
    volumes:
      - ../kafka-connect/connectors:/kafka/connect/connectors
      - ../kafka-connect/init-connectors.sh:/kafka/connect/init-connectors.sh
      - ../kafka-connect/config/connect-distributed.properties:/kafka/config/connect-distributed.properties
      - ../kafka-connect/config/connect-log4j.properties:/kafka/config/connect-log4j.properties
    command: >
      bash -c "
        /kafka/bin/connect-distributed.sh /kafka/config/connect-distributed.properties &
        sleep 30 &&
        chmod +x /kafka/connect/init-connectors.sh &&
        /kafka/connect/init-connectors.sh &&
        wait
      "
    networks:
      - my-network