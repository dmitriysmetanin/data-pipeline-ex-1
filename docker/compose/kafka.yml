services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.3
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - my-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=kafka:9092  # брокер Kafka
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    ports:
      - 8081:8081
    depends_on: [zookeeper, kafka]
    networks:
      - my-network

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.5.3
    depends_on: [zookeeper]
    hostname: kafka
    environment:
      #  CONNECT_PLUGIN_PATH: "/usr/share/java"
       CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
       KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://host.docker.internal:29092
       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
       KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
       KAFKA_BROKER_ID: 1
       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
       KAFKA_JMX_PORT: 9991
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.0.1
    hostname: kafka-connect
    depends_on:
      - kafka
      - zookeeper
      - schema-registry
    ports:
      - "8083:8083"  # REST API Kafka Connect
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "kafka-connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: "_connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "_connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "_connect-statuses"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components,/kafka/connect/plugins"
      CONNECT_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      # Для Debezium Postgres
      CONNECT_DEBEZIUM_SNAPSHOT_MODE: "initial"
    volumes:
      - ../kafka-connect/plugins:/kafka/connect/plugins
    networks:
      - my-network

# ---
# Пример curl для создания коннектора Debezium PostgreSQL CDC (запустить после старта kafka-connect):
# curl -X POST http://localhost:8083/connectors -H 'Content-Type: application/json' -d '
# {
#   "name": "debezium-postgres-connector",
#   "config": {
#     "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
#     "database.hostname": "app-db",
#     "database.port": "5432",
#     "database.user": "debezium",
#     "database.password": "dbz",
#     "database.dbname": "bank_oltp2",
#     "database.server.name": "dbserver1",
#     "topic.prefix": "dbserver1",
#     "plugin.name": "pgoutput",
#     "slot.name": "debezium_slot",
#     "publication.name": "debezium_pub",
#     "table.include.list": "public.*",
#     "tombstones.on.delete": "false",
#     "key.converter": "org.apache.kafka.connect.json.JsonConverter",
#     "value.converter": "org.apache.kafka.connect.json.JsonConverter"
#   }
# }'
# ---